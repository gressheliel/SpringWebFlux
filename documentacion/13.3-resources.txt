plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.3'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.debuggeandoideas'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:2025.0.0"
	}
}


dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.cloud:spring-cloud-starter-stream-kafka'

	//R2DBC Dependencies
	implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
	runtimeOnly 'org.postgresql:r2dbc-postgresql'
	runtimeOnly 'io.r2dbc:r2dbc-pool'

	//Spring Security
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.security:spring-security-test'

	//JWT
	implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
	runtimeOnly  'io.jsonwebtoken:jjwt-impl:0.12.6'
	runtimeOnly  'io.jsonwebtoken:jjwt-jackson:0.12.6'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}


package com.debuggeandoideas.customer_manager.exceptions;

public class StreamTerminateException extends RuntimeException {

    public StreamTerminateException(String message) {
        super(message);
    }
}

package com.debuggeandoideas.customer_manager.exceptions;

public class RetryableStreamException extends RuntimeException {

    public RetryableStreamException(String message) {
        super(message);
    }
}

package com.debuggeandoideas.customer_manager.dtos;

import jakarta.validation.constraints.Max;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.UUID;


@Data
@AllArgsConstructor
@NoArgsConstructor
public class RatingRequest {

    @NotNull(message = "id restaurant cant be null")
    private UUID idRestaurant;

    @NotNull(message = "id user cant be null")
    private UUID uuidCustomer;

    @Size(min = 10, max = 500, message = "Must contain between 10 and 500 characters")
    private String comment;

    @Min(value = 1, message = "min value 1")
    @Max(value = 5, message = "max value 5")
    private Integer rating;
}


package com.debuggeandoideas.customer_manager.dtos;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@AllArgsConstructor
@NoArgsConstructor
@Builder
public class RatingEvent {

    private String idRestaurant;
    private Integer rating;
    private String uuidCustomer;
    private String comment;
    private String eventType;

    @Builder.Default
    private Long timestamp = System.currentTimeMillis();
}

